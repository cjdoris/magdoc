#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class MagmaBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('(?!x)x'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='_',
        **kwargs
    ):
        super(MagmaBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class MagmaParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('(?!x)x'),
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='_',
        buffer_class=MagmaBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(MagmaParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._stmts_()
        self._check_eof()

    @tatsumasu()
    def _anychar_(self):  # noqa
        self._pattern(r'.|\s')

    @tatsumasu()
    def _keyword_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('\x08_\x08')
            with self._option():
                self._token('adj')
            with self._option():
                self._token('and')
            with self._option():
                self._token('assert')
            with self._option():
                self._token('assert2')
            with self._option():
                self._token('assert3')
            with self._option():
                self._token('assigned')
            with self._option():
                self._token('break')
            with self._option():
                self._token('by')
            with self._option():
                self._token('case')
            with self._option():
                self._token('cat')
            with self._option():
                self._token('catch')
            with self._option():
                self._token('clear')
            with self._option():
                self._token('cmpeq')
            with self._option():
                self._token('cmpne')
            with self._option():
                self._token('continue')
            with self._option():
                self._token('declare')
            with self._option():
                self._token('default')
            with self._option():
                self._token('delete')
            with self._option():
                self._token('diff')
            with self._option():
                self._token('div')
            with self._option():
                self._token('do')
            with self._option():
                self._token('elif')
            with self._option():
                self._token('else')
            with self._option():
                self._token('end')
            with self._option():
                self._token('eq')
            with self._option():
                self._token('error')
            with self._option():
                self._token('eval')
            with self._option():
                self._token('exists')
            with self._option():
                self._token('exit')
            with self._option():
                self._token('false')
            with self._option():
                self._token('for')
            with self._option():
                self._token('forall')
            with self._option():
                self._token('forward')
            with self._option():
                self._token('fprintf')
            with self._option():
                self._token('freeze')
            with self._option():
                self._token('function')
            with self._option():
                self._token('ge')
            with self._option():
                self._token('gt')
            with self._option():
                self._token('if')
            with self._option():
                self._token('iload')
            with self._option():
                self._token('import')
            with self._option():
                self._token('in')
            with self._option():
                self._token('intrinsic')
            with self._option():
                self._token('is')
            with self._option():
                self._token('join')
            with self._option():
                self._token('le')
            with self._option():
                self._token('load')
            with self._option():
                self._token('local')
            with self._option():
                self._token('lt')
            with self._option():
                self._token('meet')
            with self._option():
                self._token('mod')
            with self._option():
                self._token('ne')
            with self._option():
                self._token('not')
            with self._option():
                self._token('notadj')
            with self._option():
                self._token('notin')
            with self._option():
                self._token('notsubset')
            with self._option():
                self._token('or')
            with self._option():
                self._token('print')
            with self._option():
                self._token('printf')
            with self._option():
                self._token('procedure')
            with self._option():
                self._token('quit')
            with self._option():
                self._token('random')
            with self._option():
                self._token('read')
            with self._option():
                self._token('readi')
            with self._option():
                self._token('rep')
            with self._option():
                self._token('repeat')
            with self._option():
                self._token('require')
            with self._option():
                self._token('requirege')
            with self._option():
                self._token('requirerange')
            with self._option():
                self._token('restore')
            with self._option():
                self._token('return')
            with self._option():
                self._token('save')
            with self._option():
                self._token('sdiff')
            with self._option():
                self._token('select')
            with self._option():
                self._token('subset')
            with self._option():
                self._token('then')
            with self._option():
                self._token('time')
            with self._option():
                self._token('to')
            with self._option():
                self._token('true')
            with self._option():
                self._token('try')
            with self._option():
                self._token('until')
            with self._option():
                self._token('vprint')
            with self._option():
                self._token('vprintf')
            with self._option():
                self._token('vtime')
            with self._option():
                self._token('when')
            with self._option():
                self._token('where')
            with self._option():
                self._token('while')
            with self._option():
                self._token('xor')
            self._error('no available options')

    @tatsumasu()
    def _normal_ident_(self):  # noqa
        self._pattern(r'\b(?!(_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|false|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|rep|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|true|try|until|vprint|vprintf|vtime|when|where|while|xor)\b)[A-Za-z_][A-Za-z0-9_]*\b')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _quoted_ident_(self):  # noqa
        self._token("'")
        self._pattern(r"[^']*")
        self.name_last_node('value')
        self._token("'")
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _ident_(self):  # noqa
        with self._choice():
            with self._option():
                self._normal_ident_()
            with self._option():
                self._quoted_ident_()
            self._error('no available options')

    @tatsumasu()
    def _idents_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._ident_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _block_comment_(self):  # noqa
        self._token('/*')
        self._cut()

        def block1():
            with self._ifnot():
                self._token('*/')
            self._anychar_()
        self._closure(block1)
        self.name_last_node('chars')
        self._token('*/')
        self.ast._define(
            ['chars'],
            []
        )

    @tatsumasu()
    def _line_comment_(self):  # noqa
        self._token('//')
        self._cut()
        self._pattern(r'.*?$')
        self.name_last_node('text')
        self.ast._define(
            ['text'],
            []
        )

    @tatsumasu()
    def _whitespace_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern(r'\s+')
                self.name_last_node('space')
            with self._option():
                self._token('///~')
                self._cut()
            self._error('no available options')
        self.ast._define(
            ['space'],
            []
        )

    @tatsumasu()
    def _sp_(self):  # noqa
        with self._choice():
            with self._option():
                self._whitespace_()
            with self._option():
                self._line_comment_()
            with self._option():
                self._block_comment_()
            self._error('no available options')

    @tatsumasu()
    def _string_(self):  # noqa
        self._token('"')
        self._pattern(r'(\\.|[^"\\])*')
        self.name_last_node('value')
        self._token('"')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _integer_(self):  # noqa
        self._pattern(r'[0-9]+')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _bool_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('true')
                with self._option():
                    self._token('false')
                self._error('no available options')
        self.name_last_node('value')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _param_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        with self._optional():

            def block1():
                self._sp_()
            self._closure(block1)
            self._token(':=')

            def block2():
                self._sp_()
            self._closure(block2)
            self._expr_()
            self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu()
    def _params_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._param_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _parens_(self):  # noqa
        self._token('(')
        self._cut()
        self._xatoms_()
        self.name_last_node('atoms')
        self._token(')')
        self.ast._define(
            ['atoms'],
            []
        )

    @tatsumasu()
    def _angles_(self):  # noqa
        self._token('<')
        self._cut()
        self._xatoms_()
        self.name_last_node('atoms')
        self._token('>')
        self.ast._define(
            ['atoms'],
            []
        )

    @tatsumasu()
    def _braces_(self):  # noqa
        self._token('{')
        self._cut()
        self._xatoms_()
        self.name_last_node('atoms')
        self._token('}')
        self.ast._define(
            ['atoms'],
            []
        )

    @tatsumasu()
    def _brackets_(self):  # noqa
        self._token('[')
        self._cut()
        self._xatoms_()
        self.name_last_node('atoms')
        self._token(']')
        self.ast._define(
            ['atoms'],
            []
        )

    @tatsumasu()
    def _case_(self):  # noqa
        self._token('case')

        def block0():
            self._sp_()
        self._closure(block0)
        self._token('<')
        self._cut()
        self._xatoms_()
        self.name_last_node('atoms')
        self._token('default')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(':')

        def block3():
            self._sp_()
        self._closure(block3)
        self._expr_()
        self.name_last_node('default')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token('>')
        self.ast._define(
            ['atoms', 'default'],
            []
        )

    @tatsumasu()
    def _where_(self):  # noqa
        self._token('where')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._idents_()
        self.name_last_node('lhs')

        def block2():
            self._sp_()
        self._closure(block2)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('is')
                with self._option():
                    self._token(':=')
                self._error('no available options')
        self.ast._define(
            ['lhs'],
            []
        )

    @tatsumasu()
    def _select_(self):  # noqa
        self._token('select')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('expr')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('else')
        self.ast._define(
            ['expr'],
            []
        )

    @tatsumasu()
    def _function_arg_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        self.ast._define(
            ['name'],
            []
        )

    @tatsumasu()
    def _function_args_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._function_arg_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _function_(self):  # noqa
        self._token('function')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        with self._optional():
            self._ident_()
            self.name_last_node('name')

            def block2():
                self._sp_()
            self._closure(block2)
        self._token('(')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._function_args_()
        self.name_last_node('args')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._optional():
            self._token(':')

            def block6():
                self._sp_()
            self._closure(block6)
            self._cut()
            self._params_()
            self.name_last_node('params')

            def block8():
                self._sp_()
            self._closure(block8)
        self._token(')')

        def block9():
            self._sp_()
        self._closure(block9)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block11():
            self._sp_()
        self._closure(block11)
        self._token('end')

        def block12():
            self._sp_()
        self._closure(block12)
        self._cut()
        self._token('function')

        def block13():
            self._sp_()
        self._closure(block13)
        self.ast._define(
            ['args', 'body', 'name', 'params'],
            []
        )

    @tatsumasu()
    def _procedure_arg_(self):  # noqa
        with self._optional():
            self._token('~')
            self.name_last_node('ref')
        self._ident_()
        self.name_last_node('name')
        self.ast._define(
            ['name', 'ref'],
            []
        )

    @tatsumasu()
    def _procedure_args_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._procedure_arg_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _procedure_(self):  # noqa
        self._token('procedure')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        with self._optional():
            self._ident_()
            self.name_last_node('name')

            def block2():
                self._sp_()
            self._closure(block2)
        self._token('(')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._procedure_args_()
        self.name_last_node('args')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._optional():
            self._token(':')

            def block6():
                self._sp_()
            self._closure(block6)
            self._cut()
            self._params_()
            self.name_last_node('params')

            def block8():
                self._sp_()
            self._closure(block8)
        self._token(')')

        def block9():
            self._sp_()
        self._closure(block9)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block11():
            self._sp_()
        self._closure(block11)
        self._token('end')

        def block12():
            self._sp_()
        self._closure(block12)
        self._cut()
        self._token('procedure')

        def block13():
            self._sp_()
        self._closure(block13)
        self.ast._define(
            ['args', 'body', 'name', 'params'],
            []
        )

    @tatsumasu()
    def _operator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('->')
            with self._option():
                self._token('+')
            with self._option():
                self._token('&+')
            with self._option():
                self._token('-')
            with self._option():
                self._token('*')
            with self._option():
                self._token('&*')
            with self._option():
                with self._ifnot():
                    self._token('//')
                with self._ifnot():
                    self._token('/*')
                self._token('/')
            with self._option():
                self._token('^')
            with self._option():
                self._token('.')
            with self._option():
                self._token('``')
            with self._option():
                self._token('`')
            with self._option():
                self._token('@@')
            with self._option():
                self._token('@')
            with self._option():
                self._token('#')
            with self._option():
                self._token('!')
            with self._option():
                self._token('cat')
            with self._option():
                self._token('&cat')
            with self._option():
                self._token('div')
            with self._option():
                self._token('mod')
            with self._option():
                self._token('join')
            with self._option():
                self._token('&join')
            with self._option():
                self._token('meet')
            with self._option():
                self._token('&meet')
            with self._option():
                self._token('diff')
            with self._option():
                self._token('sdiff')
            with self._option():
                self._token('eq')
            with self._option():
                self._token('ne')
            with self._option():
                self._token('le')
            with self._option():
                self._token('lt')
            with self._option():
                self._token('ge')
            with self._option():
                self._token('gt')
            with self._option():
                self._token('not')
            with self._option():
                self._token('or')
            with self._option():
                self._token('and')
            with self._option():
                self._token('in')
            with self._option():
                self._token('notin')
            with self._option():
                self._token('subset')
            with self._option():
                self._token('notsubset')
            with self._option():
                self._token('adj')
            with self._option():
                self._token('notadj')
            with self._option():
                self._token('assigned')
            with self._option():
                self._token('eval')
            with self._option():
                self._token('forall')
            with self._option():
                self._token('exists')
            with self._option():
                self._token('random')
            with self._option():
                self._token('rep')
            with self._option():
                self._token('cmpeq')
            with self._option():
                self._token('cmpne')
            self._error('no available options')

    @tatsumasu()
    def _xsymbol_(self):  # noqa
        with self._choice():
            with self._option():
                self._token(':->')
            with self._option():
                self._token(':=')
            with self._option():
                self._token(',')
            with self._option():
                self._token('|')
            with self._option():
                self._token(':')
            with self._option():
                self._token('~')
            with self._option():
                self._token('by')
            self._error('no available options')

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._choice():
            with self._option():
                self._ident_()
            with self._option():
                self._token('_')
            with self._option():
                self._string_()
            with self._option():
                self._parens_()
            with self._option():
                self._angles_()
            with self._option():
                self._braces_()
            with self._option():
                self._brackets_()
            with self._option():
                self._integer_()
            with self._option():
                self._operator_()
            with self._option():
                self._bool_()
            with self._option():
                self._function_()
            with self._option():
                self._procedure_()
            with self._option():
                self._where_()
            with self._option():
                self._select_()
            with self._option():
                self._case_()
            with self._option():
                with self._choice():
                    with self._option():
                        self._whitespace_()
                    with self._option():
                        self._line_comment_()
                    with self._option():
                        self._block_comment_()
                    self._error('no available options')
            self._error('no available options')

    @tatsumasu()
    def _xatom_(self):  # noqa
        with self._choice():
            with self._option():
                self._xsymbol_()
            with self._option():
                with self._choice():
                    with self._option():
                        self._ident_()
                    with self._option():
                        self._token('_')
                    with self._option():
                        self._string_()
                    with self._option():
                        self._parens_()
                    with self._option():
                        self._angles_()
                    with self._option():
                        self._braces_()
                    with self._option():
                        self._brackets_()
                    with self._option():
                        self._integer_()
                    with self._option():
                        self._operator_()
                    with self._option():
                        self._bool_()
                    with self._option():
                        self._function_()
                    with self._option():
                        self._procedure_()
                    with self._option():
                        self._where_()
                    with self._option():
                        self._select_()
                    with self._option():
                        self._case_()
                    with self._option():
                        with self._choice():
                            with self._option():
                                self._whitespace_()
                            with self._option():
                                self._line_comment_()
                            with self._option():
                                self._block_comment_()
                            self._error('no available options')
                    self._error('no available options')
            self._error('no available options')

    @tatsumasu()
    def _xatoms_(self):  # noqa

        def block0():
            self._xatom_()
        self._closure(block0)

    @tatsumasu()
    def _expr_(self):  # noqa

        def block0():
            self._atom_()
        self._closure(block0)

    @tatsumasu()
    def _exprs_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._expr_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _any_cat_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('.')
                with self._option():
                    self._token('Any')
                self._error('no available options')
        self._constant('any')
        self.name_last_node('type')
        self.ast._define(
            ['type'],
            []
        )

    @tatsumasu()
    def _seq_cat_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('[')

                    def block0():
                        self._sp_()
                    self._closure(block0)
                    with self._optional():
                        self._cat_()
                        self.name_last_node('cat')

                        def block2():
                            self._sp_()
                        self._closure(block2)
                    self._token(']')
                with self._option():
                    self._token('SeqEnum')

                    def block3():
                        self._sp_()
                    self._closure(block3)
                    self._token('[')

                    def block4():
                        self._sp_()
                    self._closure(block4)
                    with self._optional():
                        self._cat_()
                        self.name_last_node('cat')

                        def block6():
                            self._sp_()
                        self._closure(block6)
                    self._token(']')
                self._error('no available options')
        self._constant('seq')
        self.name_last_node('type')
        self.ast._define(
            ['cat', 'type'],
            []
        )

    @tatsumasu()
    def _set_cat_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('{')

                    def block0():
                        self._sp_()
                    self._closure(block0)
                    with self._optional():
                        self._cat_()
                        self.name_last_node('cat')

                        def block2():
                            self._sp_()
                        self._closure(block2)
                    self._token('}')
                with self._option():
                    self._token('SetEnum')

                    def block3():
                        self._sp_()
                    self._closure(block3)
                    self._token('[')

                    def block4():
                        self._sp_()
                    self._closure(block4)
                    with self._optional():
                        self._cat_()
                        self.name_last_node('cat')

                        def block6():
                            self._sp_()
                        self._closure(block6)
                    self._token(']')
                self._error('no available options')
        self._constant('set')
        self.name_last_node('type')
        self.ast._define(
            ['cat', 'type'],
            []
        )

    @tatsumasu()
    def _ident_cat_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        with self._optional():

            def block1():
                self._sp_()
            self._closure(block1)
            self._token('[')
            self._cats_()
            self.name_last_node('cats')
            self._token(']')
        self._constant('ident')
        self.name_last_node('type')
        self.ast._define(
            ['cats', 'name', 'type'],
            []
        )

    @tatsumasu()
    def _cat_(self):  # noqa
        with self._choice():
            with self._option():
                self._any_cat_()
            with self._option():
                self._seq_cat_()
            with self._option():
                self._set_cat_()
            with self._option():
                self._ident_cat_()
            self._error('no available options')

    @tatsumasu()
    def _cats_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._cat_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _any_scat_(self):  # noqa
        self._any_cat_()

    @tatsumasu()
    def _seq_scat_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('[')

                    def block0():
                        self._sp_()
                    self._closure(block0)
                    self._token(']')
                with self._option():
                    self._token('SeqEnum')
                self._error('no available options')
        self._constant('seq')
        self.name_last_node('type')
        self.ast._define(
            ['type'],
            []
        )

    @tatsumasu()
    def _set_scat_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('{')

                    def block0():
                        self._sp_()
                    self._closure(block0)
                    self._token('}')
                with self._option():
                    self._token('SetEnum')
                self._error('no available options')
        self._constant('set')
        self.name_last_node('type')
        self.ast._define(
            ['type'],
            []
        )

    @tatsumasu()
    def _ident_scat_(self):  # noqa
        self._ident_()
        self.name_last_node('name')
        self._constant('ident')
        self.name_last_node('type')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _scat_(self):  # noqa
        with self._choice():
            with self._option():
                self._any_scat_()
            with self._option():
                self._seq_scat_()
            with self._option():
                self._set_scat_()
            with self._option():
                self._ident_scat_()
            self._error('no available options')

    @tatsumasu()
    def _scats_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._scat_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _intrinsic_arg_(self):  # noqa
        with self._optional():
            self._token('~')
            self.name_last_node('ref')

            def block1():
                self._sp_()
            self._closure(block1)
        self._ident_()
        self.name_last_node('name')
        with self._optional():

            def block3():
                self._sp_()
            self._closure(block3)
            self._token('::')

            def block4():
                self._sp_()
            self._closure(block4)
            self._cat_()
            self.name_last_node('cat')
        self.ast._define(
            ['cat', 'name', 'ref'],
            []
        )

    @tatsumasu()
    def _intrinsic_args_(self):  # noqa

        def sep0():
            with self._group():

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(',')

                def block2():
                    self._sp_()
                self._closure(block2)

        def block0():
            self._intrinsic_arg_()
        self._gather(block0, sep0)

    @tatsumasu()
    def _intrinsic_doc_char_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('\\')
                self._anychar_()
                self.name_last_node('value')
                self._constant('escape')
                self.name_last_node('type')
            with self._option():
                with self._ifnot():
                    self._token('}')
                with self._ifnot():
                    self._token('\\')
                self._anychar_()
                self.name_last_node('value')
                self._constant('char')
                self.name_last_node('type')
            self._error('no available options')
        self.ast._define(
            ['type', 'value'],
            []
        )

    @tatsumasu()
    def _intrinsic_doc_(self):  # noqa
        self._token('{')

        def block1():
            self._intrinsic_doc_char_()
        self._closure(block1)
        self.name_last_node('chars')
        self._token('}')
        self.ast._define(
            ['chars'],
            []
        )

    @tatsumasu()
    def _intrinsic_stmt_(self):  # noqa
        self._token('intrinsic')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._ident_()
        self.name_last_node('name')

        def block2():
            self._sp_()
        self._closure(block2)
        self._cut()
        self._token('(')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._intrinsic_args_()
        self.name_last_node('args')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._optional():
            self._token(':')

            def block6():
                self._sp_()
            self._closure(block6)
            self._cut()
            self._params_()
            self.name_last_node('params')

            def block8():
                self._sp_()
            self._closure(block8)
        self._token(')')

        def block9():
            self._sp_()
        self._closure(block9)
        self._cut()
        with self._optional():
            self._token('->')

            def block10():
                self._sp_()
            self._closure(block10)
            self._cut()
            self._scats_()
            self.name_last_node('returns')

            def block12():
                self._sp_()
            self._closure(block12)
        self._intrinsic_doc_()
        self.name_last_node('doc')

        def block14():
            self._sp_()
        self._closure(block14)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block16():
            self._sp_()
        self._closure(block16)
        self._token('end')

        def block17():
            self._sp_()
        self._closure(block17)
        self._cut()
        self._token('intrinsic')

        def block18():
            self._sp_()
        self._closure(block18)
        self._cut()
        self._token(';')
        self.ast._define(
            ['args', 'body', 'doc', 'name', 'params', 'returns'],
            []
        )

    @tatsumasu()
    def _import_stmt_(self):  # noqa
        self._token('import')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('file')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(':')

        def block3():
            self._sp_()
        self._closure(block3)
        self._idents_()
        self.name_last_node('names')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token(';')
        self.ast._define(
            ['file', 'names'],
            []
        )

    @tatsumasu()
    def _require_stmt_(self):  # noqa
        self._token('require')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(':')

        def block3():
            self._sp_()
        self._closure(block3)
        self._exprs_()
        self.name_last_node('msg')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token(';')
        self.ast._define(
            ['msg', 'pred'],
            []
        )

    @tatsumasu()
    def _requirege_stmt_(self):  # noqa
        self._token('requirege')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('exprs')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['exprs'],
            []
        )

    @tatsumasu()
    def _requirerange_stmt_(self):  # noqa
        self._token('requirerange')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('exprs')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['exprs'],
            []
        )

    @tatsumasu()
    def _assert_stmt_(self):  # noqa
        self._token('assert')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['pred'],
            []
        )

    @tatsumasu()
    def _return_stmt_(self):  # noqa
        self._token('return')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        with self._optional():
            self._exprs_()
            self.name_last_node('values')

            def block2():
                self._sp_()
            self._closure(block2)
        self._token(';')
        self.ast._define(
            ['values'],
            []
        )

    @tatsumasu()
    def _if_end_(self):  # noqa
        self._token('end')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._token('if')

        def block1():
            self._sp_()
        self._closure(block1)
        self._token(';')

    @tatsumasu()
    def _if_next_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('end')

                def block0():
                    self._sp_()
                self._closure(block0)
                self._cut()
                self._token('if')

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(';')
            with self._option():
                self._if_elif_()
                self.name_last_node('elif_')
                self._constant('elif')
                self.name_last_node('next')
            with self._option():
                self._if_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['elif_', 'else_', 'next'],
            []
        )

    @tatsumasu()
    def _if_elif_(self):  # noqa
        self._token('elif')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('then')

        def block3():
            self._sp_()
        self._closure(block3)
        self._stmts_()
        self.name_last_node('body')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._choice():
            with self._option():
                self._token('end')

                def block6():
                    self._sp_()
                self._closure(block6)
                self._cut()
                self._token('if')

                def block7():
                    self._sp_()
                self._closure(block7)
                self._token(';')
            with self._option():
                self._if_elif_()
                self.name_last_node('elif_')
                self._constant('elif')
                self.name_last_node('next')
            with self._option():
                self._if_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['body', 'elif_', 'else_', 'next', 'pred'],
            []
        )

    @tatsumasu()
    def _if_else_(self):  # noqa
        self._token('else')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('end')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._token('if')

        def block4():
            self._sp_()
        self._closure(block4)
        self._token(';')
        self.ast._define(
            ['body'],
            []
        )

    @tatsumasu()
    def _if_stmt_(self):  # noqa
        self._token('if')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('then')

        def block3():
            self._sp_()
        self._closure(block3)
        self._stmts_()
        self.name_last_node('body')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._choice():
            with self._option():
                self._token('end')

                def block6():
                    self._sp_()
                self._closure(block6)
                self._cut()
                self._token('if')

                def block7():
                    self._sp_()
                self._closure(block7)
                self._token(';')
            with self._option():
                self._if_elif_()
                self.name_last_node('elif_')
                self._constant('elif')
                self.name_last_node('next')
            with self._option():
                self._if_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['body', 'elif_', 'else_', 'next', 'pred'],
            []
        )

    @tatsumasu()
    def _while_stmt_(self):  # noqa
        self._token('while')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('do')

        def block3():
            self._sp_()
        self._closure(block3)
        self._stmts_()
        self.name_last_node('body')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token('end')

        def block6():
            self._sp_()
        self._closure(block6)
        self._cut()
        self._token('while')

        def block7():
            self._sp_()
        self._closure(block7)
        self._token(';')
        self.ast._define(
            ['body', 'pred'],
            []
        )

    @tatsumasu()
    def _repeat_stmt_(self):  # noqa
        self._token('repeat')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('until')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._expr_()
        self.name_last_node('pred')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token(';')
        self.ast._define(
            ['body', 'pred'],
            []
        )

    @tatsumasu()
    def _declare_type_stmt_(self):  # noqa
        self._token('declare')

        def block0():
            self._sp_()
        self._closure(block0)
        self._token('type')

        def block1():
            self._sp_()
        self._closure(block1)
        self._cut()
        self._ident_()
        self.name_last_node('cat')

        def block3():
            self._sp_()
        self._closure(block3)
        with self._optional():
            self._token('[')

            def block4():
                self._sp_()
            self._closure(block4)
            self._cut()
            self._ident_()
            self.name_last_node('eltcat')

            def block6():
                self._sp_()
            self._closure(block6)
            self._token(']')

            def block7():
                self._sp_()
            self._closure(block7)
        with self._optional():
            self._token(':')

            def block8():
                self._sp_()
            self._closure(block8)
            self._cut()
            self._idents_()
            self.name_last_node('parents')

            def block10():
                self._sp_()
            self._closure(block10)
        self._token(';')
        self.ast._define(
            ['cat', 'eltcat', 'parents'],
            []
        )

    @tatsumasu()
    def _declare_attributes_stmt_(self):  # noqa
        self._token('declare')

        def block0():
            self._sp_()
        self._closure(block0)
        self._token('attributes')

        def block1():
            self._sp_()
        self._closure(block1)
        self._cut()
        self._ident_()
        self.name_last_node('cat')

        def block3():
            self._sp_()
        self._closure(block3)
        self._token(':')

        def block4():
            self._sp_()
        self._closure(block4)
        self._cut()
        self._idents_()
        self.name_last_node('attrs')

        def block6():
            self._sp_()
        self._closure(block6)
        self._token(';')
        self.ast._define(
            ['attrs', 'cat'],
            []
        )

    @tatsumasu()
    def _declare_verbose_stmt_(self):  # noqa
        self._token('declare')

        def block0():
            self._sp_()
        self._closure(block0)
        self._token('verbose')

        def block1():
            self._sp_()
        self._closure(block1)
        self._cut()
        self._ident_()
        self.name_last_node('name')

        def block3():
            self._sp_()
        self._closure(block3)
        self._token(',')

        def block4():
            self._sp_()
        self._closure(block4)
        self._integer_()
        self.name_last_node('max')

        def block6():
            self._sp_()
        self._closure(block6)
        self._token(';')
        self.ast._define(
            ['max', 'name'],
            []
        )

    @tatsumasu()
    def _case_end_(self):  # noqa
        self._token('end')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._token('case')

        def block1():
            self._sp_()
        self._closure(block1)
        self._token(';')

    @tatsumasu()
    def _case_next_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('end')

                def block0():
                    self._sp_()
                self._closure(block0)
                self._cut()
                self._token('case')

                def block1():
                    self._sp_()
                self._closure(block1)
                self._token(';')
            with self._option():
                self._case_when_()
                self.name_last_node('when')
                self._constant('when')
                self.name_last_node('next')
            with self._option():
                self._case_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['else_', 'next', 'when'],
            []
        )

    @tatsumasu()
    def _case_else_(self):  # noqa
        self._token('else')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._stmts_()
        self.name_last_node('body')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('end')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._token('case')

        def block4():
            self._sp_()
        self._closure(block4)
        self._token(';')
        self.ast._define(
            ['body'],
            []
        )

    @tatsumasu()
    def _case_when_(self):  # noqa
        self._token('when')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('values')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(':')

        def block3():
            self._sp_()
        self._closure(block3)
        self._stmts_()
        self.name_last_node('body')

        def block5():
            self._sp_()
        self._closure(block5)
        with self._choice():
            with self._option():
                self._token('end')

                def block6():
                    self._sp_()
                self._closure(block6)
                self._cut()
                self._token('case')

                def block7():
                    self._sp_()
                self._closure(block7)
                self._token(';')
            with self._option():
                self._case_when_()
                self.name_last_node('when')
                self._constant('when')
                self.name_last_node('next')
            with self._option():
                self._case_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['body', 'else_', 'next', 'values', 'when'],
            []
        )

    @tatsumasu()
    def _case_stmt_(self):  # noqa
        self._token('case')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._expr_()
        self.name_last_node('value')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(':')

        def block3():
            self._sp_()
        self._closure(block3)
        with self._choice():
            with self._option():
                self._token('end')

                def block4():
                    self._sp_()
                self._closure(block4)
                self._cut()
                self._token('case')

                def block5():
                    self._sp_()
                self._closure(block5)
                self._token(';')
            with self._option():
                self._case_when_()
                self.name_last_node('when')
                self._constant('when')
                self.name_last_node('next')
            with self._option():
                self._case_else_()
                self.name_last_node('else_')
                self._constant('else')
                self.name_last_node('next')
            self._error('no available options')
        self.ast._define(
            ['else_', 'next', 'value', 'when'],
            []
        )

    @tatsumasu()
    def _print_level_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Magma')
            with self._option():
                self._token('Default')
            with self._option():
                self._token('Maximal')
            with self._option():
                self._token('Minimal')
            self._error('no available options')

    @tatsumasu()
    def _print_stmt_(self):  # noqa
        self._token('print')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('values')

        def block2():
            self._sp_()
        self._closure(block2)
        with self._optional():
            self._token(':')

            def block3():
                self._sp_()
            self._closure(block3)
            self._print_level_()
            self.name_last_node('print_level')
        self._token(';')
        self.ast._define(
            ['print_level', 'values'],
            []
        )

    @tatsumasu()
    def _printf_stmt_(self):  # noqa
        self._token('printf')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('values')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['values'],
            []
        )

    @tatsumasu()
    def _error_if_stmt_(self):  # noqa
        self._token('error')

        def block0():
            self._sp_()
        self._closure(block0)
        self._token('if')

        def block1():
            self._sp_()
        self._closure(block1)
        self._cut()
        self._exprs_()
        self.name_last_node('values')

        def block3():
            self._sp_()
        self._closure(block3)
        self._token(';')
        self.ast._define(
            ['values'],
            []
        )

    @tatsumasu()
    def _error_stmt_(self):  # noqa
        self._token('error')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('values')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['values'],
            []
        )

    @tatsumasu()
    def _for_stmt_(self):  # noqa
        self._token('for')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._ident_()
        self.name_last_node('var')

        def block2():
            self._sp_()
        self._closure(block2)
        with self._group():
            with self._choice():
                with self._option():
                    self._token('in')
                    self.name_last_node('itertype')

                    def block4():
                        self._sp_()
                    self._closure(block4)
                    self._cut()
                    self._expr_()
                    self.name_last_node('iter')

                    def block6():
                        self._sp_()
                    self._closure(block6)
                with self._option():
                    self._token(':=')
                    self.name_last_node('itertype')

                    def block8():
                        self._sp_()
                    self._closure(block8)
                    self._cut()
                    self._expr_()
                    self.name_last_node('start')

                    def block10():
                        self._sp_()
                    self._closure(block10)
                    self._token('to')

                    def block11():
                        self._sp_()
                    self._closure(block11)
                    self._expr_()
                    self.name_last_node('end')

                    def block13():
                        self._sp_()
                    self._closure(block13)
                    with self._optional():
                        self._token('by')

                        def block14():
                            self._sp_()
                        self._closure(block14)
                        self._expr_()
                        self.name_last_node('jump')
                self._error('no available options')
        self._token('do')

        def block17():
            self._sp_()
        self._closure(block17)
        self._stmts_()
        self.name_last_node('body')

        def block19():
            self._sp_()
        self._closure(block19)
        self._token('end')

        def block20():
            self._sp_()
        self._closure(block20)
        self._cut()
        self._token('for')

        def block21():
            self._sp_()
        self._closure(block21)
        self._token(';')
        self.ast._define(
            ['body', 'end', 'iter', 'itertype', 'jump', 'start', 'var'],
            []
        )

    @tatsumasu()
    def _break_stmt_(self):  # noqa
        self._token('break')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        with self._optional():
            self._ident_()
            self.name_last_node('var')

            def block2():
                self._sp_()
            self._closure(block2)
        self._token(';')
        self.ast._define(
            ['var'],
            []
        )

    @tatsumasu()
    def _continue_stmt_(self):  # noqa
        self._token('continue')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        with self._optional():
            self._ident_()
            self.name_last_node('var')

            def block2():
                self._sp_()
            self._closure(block2)
        self._token(';')
        self.ast._define(
            ['var'],
            []
        )

    @tatsumasu()
    def _delete_stmt_(self):  # noqa
        self._token('delete')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._exprs_()
        self.name_last_node('vals')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['vals'],
            []
        )

    @tatsumasu()
    def _expr_stmt_(self):  # noqa
        self._exprs_()
        self.name_last_node('exprs')

        def block1():
            self._sp_()
        self._closure(block1)
        with self._optional():
            self._token(':')

            def block2():
                self._sp_()
            self._closure(block2)
            self._cut()
            self._print_level_()
            self.name_last_node('print_level')

            def block4():
                self._sp_()
            self._closure(block4)
        self._token(';')
        self.ast._define(
            ['exprs', 'print_level'],
            []
        )

    @tatsumasu()
    def _forward_stmt_(self):  # noqa
        self._token('forward')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._idents_()
        self.name_last_node('names')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token(';')
        self.ast._define(
            ['names'],
            []
        )

    @tatsumasu()
    def _vprint_stmt_(self):  # noqa
        self._token('vprint')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._ident_()
        self.name_last_node('name')

        def block2():
            self._sp_()
        self._closure(block2)
        with self._optional():
            self._token(',')

            def block3():
                self._sp_()
            self._closure(block3)
            self._cut()
            self._expr_()
            self.name_last_node('level')

            def block5():
                self._sp_()
            self._closure(block5)
        self._token(':')
        self._exprs_()
        self.name_last_node('values')

        def block7():
            self._sp_()
        self._closure(block7)
        self._token(';')
        self.ast._define(
            ['level', 'name', 'values'],
            []
        )

    @tatsumasu()
    def _vprintf_stmt_(self):  # noqa
        self._token('vprintf')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._ident_()
        self.name_last_node('name')

        def block2():
            self._sp_()
        self._closure(block2)
        with self._optional():
            self._token(',')

            def block3():
                self._sp_()
            self._closure(block3)
            self._cut()
            self._expr_()
            self.name_last_node('level')

            def block5():
                self._sp_()
            self._closure(block5)
        self._token(':')
        self._exprs_()
        self.name_last_node('values')

        def block7():
            self._sp_()
        self._closure(block7)
        self._token(';')
        self.ast._define(
            ['level', 'name', 'values'],
            []
        )

    @tatsumasu()
    def _try_stmt_(self):  # noqa
        self._token('try')

        def block0():
            self._sp_()
        self._closure(block0)
        self._cut()
        self._stmts_()
        self.name_last_node('tbody')

        def block2():
            self._sp_()
        self._closure(block2)
        self._token('catch')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._ident_()
        self.name_last_node('errval')

        def block5():
            self._sp_()
        self._closure(block5)
        self._cut()
        self._stmts_()
        self.name_last_node('cbody')

        def block7():
            self._sp_()
        self._closure(block7)
        self._token('end')

        def block8():
            self._sp_()
        self._closure(block8)
        self._cut()
        self._token('try')

        def block9():
            self._sp_()
        self._closure(block9)
        self._token(';')
        self.ast._define(
            ['cbody', 'errval', 'tbody'],
            []
        )

    @tatsumasu()
    def _assign_(self):  # noqa
        self._token(':=')

    @tatsumasu()
    def _assign_stmt_(self):  # noqa
        self._exprs_()
        self.name_last_node('lhs')

        def block1():
            self._sp_()
        self._closure(block1)
        self._assign_()
        self.name_last_node('assign')

        def block3():
            self._sp_()
        self._closure(block3)
        self._cut()
        self._expr_()
        self.name_last_node('rhs')

        def block5():
            self._sp_()
        self._closure(block5)
        self._token(';')
        self.ast._define(
            ['assign', 'lhs', 'rhs'],
            []
        )

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._sp_()
            with self._option():
                self._intrinsic_stmt_()
            with self._option():
                self._print_stmt_()
            with self._option():
                self._printf_stmt_()
            with self._option():
                self._error_if_stmt_()
            with self._option():
                self._error_stmt_()
            with self._option():
                self._for_stmt_()
            with self._option():
                self._while_stmt_()
            with self._option():
                self._repeat_stmt_()
            with self._option():
                self._if_stmt_()
            with self._option():
                self._return_stmt_()
            with self._option():
                self._delete_stmt_()
            with self._option():
                self._break_stmt_()
            with self._option():
                self._continue_stmt_()
            with self._option():
                self._assert_stmt_()
            with self._option():
                self._require_stmt_()
            with self._option():
                self._requirege_stmt_()
            with self._option():
                self._requirerange_stmt_()
            with self._option():
                self._import_stmt_()
            with self._option():
                self._declare_type_stmt_()
            with self._option():
                self._declare_attributes_stmt_()
            with self._option():
                self._declare_verbose_stmt_()
            with self._option():
                self._case_stmt_()
            with self._option():
                self._forward_stmt_()
            with self._option():
                self._vprint_stmt_()
            with self._option():
                self._vprintf_stmt_()
            with self._option():
                self._try_stmt_()
            with self._option():
                self._assign_stmt_()
            with self._option():
                self._expr_stmt_()
            self._error('no available options')

    @tatsumasu()
    def _stmts_(self):  # noqa

        def block0():
            self._stmt_()
        self._closure(block0)


class MagmaSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def anychar(self, ast):  # noqa
        return ast

    def keyword(self, ast):  # noqa
        return ast

    def normal_ident(self, ast):  # noqa
        return ast

    def quoted_ident(self, ast):  # noqa
        return ast

    def ident(self, ast):  # noqa
        return ast

    def idents(self, ast):  # noqa
        return ast

    def block_comment(self, ast):  # noqa
        return ast

    def line_comment(self, ast):  # noqa
        return ast

    def whitespace(self, ast):  # noqa
        return ast

    def sp(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def bool(self, ast):  # noqa
        return ast

    def param(self, ast):  # noqa
        return ast

    def params(self, ast):  # noqa
        return ast

    def parens(self, ast):  # noqa
        return ast

    def angles(self, ast):  # noqa
        return ast

    def braces(self, ast):  # noqa
        return ast

    def brackets(self, ast):  # noqa
        return ast

    def case(self, ast):  # noqa
        return ast

    def where(self, ast):  # noqa
        return ast

    def select(self, ast):  # noqa
        return ast

    def function_arg(self, ast):  # noqa
        return ast

    def function_args(self, ast):  # noqa
        return ast

    def function(self, ast):  # noqa
        return ast

    def procedure_arg(self, ast):  # noqa
        return ast

    def procedure_args(self, ast):  # noqa
        return ast

    def procedure(self, ast):  # noqa
        return ast

    def operator(self, ast):  # noqa
        return ast

    def xsymbol(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def xatom(self, ast):  # noqa
        return ast

    def xatoms(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def exprs(self, ast):  # noqa
        return ast

    def any_cat(self, ast):  # noqa
        return ast

    def seq_cat(self, ast):  # noqa
        return ast

    def set_cat(self, ast):  # noqa
        return ast

    def ident_cat(self, ast):  # noqa
        return ast

    def cat(self, ast):  # noqa
        return ast

    def cats(self, ast):  # noqa
        return ast

    def any_scat(self, ast):  # noqa
        return ast

    def seq_scat(self, ast):  # noqa
        return ast

    def set_scat(self, ast):  # noqa
        return ast

    def ident_scat(self, ast):  # noqa
        return ast

    def scat(self, ast):  # noqa
        return ast

    def scats(self, ast):  # noqa
        return ast

    def intrinsic_arg(self, ast):  # noqa
        return ast

    def intrinsic_args(self, ast):  # noqa
        return ast

    def intrinsic_doc_char(self, ast):  # noqa
        return ast

    def intrinsic_doc(self, ast):  # noqa
        return ast

    def intrinsic_stmt(self, ast):  # noqa
        return ast

    def import_stmt(self, ast):  # noqa
        return ast

    def require_stmt(self, ast):  # noqa
        return ast

    def requirege_stmt(self, ast):  # noqa
        return ast

    def requirerange_stmt(self, ast):  # noqa
        return ast

    def assert_stmt(self, ast):  # noqa
        return ast

    def return_stmt(self, ast):  # noqa
        return ast

    def if_end(self, ast):  # noqa
        return ast

    def if_next(self, ast):  # noqa
        return ast

    def if_elif(self, ast):  # noqa
        return ast

    def if_else(self, ast):  # noqa
        return ast

    def if_stmt(self, ast):  # noqa
        return ast

    def while_stmt(self, ast):  # noqa
        return ast

    def repeat_stmt(self, ast):  # noqa
        return ast

    def declare_type_stmt(self, ast):  # noqa
        return ast

    def declare_attributes_stmt(self, ast):  # noqa
        return ast

    def declare_verbose_stmt(self, ast):  # noqa
        return ast

    def case_end(self, ast):  # noqa
        return ast

    def case_next(self, ast):  # noqa
        return ast

    def case_else(self, ast):  # noqa
        return ast

    def case_when(self, ast):  # noqa
        return ast

    def case_stmt(self, ast):  # noqa
        return ast

    def print_level(self, ast):  # noqa
        return ast

    def print_stmt(self, ast):  # noqa
        return ast

    def printf_stmt(self, ast):  # noqa
        return ast

    def error_if_stmt(self, ast):  # noqa
        return ast

    def error_stmt(self, ast):  # noqa
        return ast

    def for_stmt(self, ast):  # noqa
        return ast

    def break_stmt(self, ast):  # noqa
        return ast

    def continue_stmt(self, ast):  # noqa
        return ast

    def delete_stmt(self, ast):  # noqa
        return ast

    def expr_stmt(self, ast):  # noqa
        return ast

    def forward_stmt(self, ast):  # noqa
        return ast

    def vprint_stmt(self, ast):  # noqa
        return ast

    def vprintf_stmt(self, ast):  # noqa
        return ast

    def try_stmt(self, ast):  # noqa
        return ast

    def assign(self, ast):  # noqa
        return ast

    def assign_stmt(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def stmts(self, ast):  # noqa
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = MagmaParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, MagmaParser, name='Magma')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
